{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["API_HOST","columns","title","dataIndex","key","width","App","props","state","ruWord","engWord","items","sourceItems","loading","handleChange","bind","handleChangeAc","saveToVocabulary","this","setState","fetch","then","res","json","result","uniqueTags","map","elem","indexOf","push","options","console","log","opts","item","value","isLoaded","error","event","autoCompleteField","find","x","rusWord","target","name","axios","post","vocabularyElement","response","catch","className","justify","align","span","flex","style","placeholder","filterOption","inputValue","option","toUpperCase","onChange","type","display","onClick","backgroundColor","dataSource","pagination","pageSize","bordered","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.60109cc9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Button, Row, Col, AutoComplete, Input, Table } from \"antd\";\r\nimport axios from \"axios\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./App.css\";\r\n\r\nconst API_HOST = \"https://my-vocabulary-deploy.azurewebsites.net\";\r\nconst COLUMN_WIDTH = 350;\r\nconst FIELD_WIDTH = 350;\r\n\r\nconst columns = [\r\n  {\r\n    title: 'Eng',\r\n    dataIndex: 'engWord',\r\n    key: 'engWord',\r\n    width: COLUMN_WIDTH\r\n  },\r\n  {\r\n    title: 'Rus',\r\n    dataIndex: 'rusWord',\r\n    key: 'rusWord',\r\n    width: COLUMN_WIDTH\r\n  },\r\n];\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      ruWord: \"\",\r\n      engWord: \"\",\r\n      items: [],\r\n      sourceItems: [],\r\n      loading: false,\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleChangeAc = this.handleChangeAc.bind(this);\r\n    this.saveToVocabulary = this.saveToVocabulary.bind(this);\r\n  }\r\n\r\n  \r\n\r\n  componentDidMount() {\r\n    this.setState({\r\n      loading: true\r\n    });\r\n    fetch(`${API_HOST}/api/v2/vocabulary`)\r\n      .then((res) => res.json())\r\n      .then(\r\n        (result) => {\r\n          const uniqueTags = [];\r\n          result.map((elem) => {\r\n              if (uniqueTags.indexOf(elem.engWord) === -1) {\r\n                uniqueTags.push(elem);\r\n              }\r\n              return elem;\r\n            });\r\n          var options = uniqueTags;\r\n          console.log(options);\r\n          const opts = options.map((item) => {\r\n            return { value: item.engWord };\r\n          });\r\n          this.setState({\r\n            sourceItems: options,\r\n            isLoaded: true,\r\n            items: opts,\r\n            loading: false\r\n          });\r\n        },\r\n        // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\r\n        // чтобы не перехватывать исключения из ошибок в самих компонентах.\r\n        (error) => {\r\n          this.setState({\r\n            isLoaded: true,\r\n            error,\r\n            loading: false,\r\n          });\r\n        }\r\n      );\r\n  }\r\n\r\n  handleChangeAc(event) {\r\n    this.setState({\r\n      autoCompleteField: event,\r\n      engWord: event,\r\n      ruWord: this.state.sourceItems.find((x) => x.engWord === event)?.rusWord,\r\n    });\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  }\r\n\r\n  saveToVocabulary() {\r\n    axios\r\n      .post(`${API_HOST}/api/v2/vocabulary`, {\r\n        vocabularyElement: {\r\n          rusWord: this.state.ruWord,\r\n          engWord: this.state.engWord,\r\n        },\r\n      })\r\n      .then(function (response) {\r\n        console.log(response);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"App-content\">\r\n          <Row justify=\"space-around\" align=\"middle\">\r\n            <Col span={12} width={400} flex={1}>\r\n              <AutoComplete\r\n                name=\"enWord\"\r\n                style={{\r\n                  width: FIELD_WIDTH,\r\n                }}\r\n                options={this.state.items}\r\n                placeholder=\"try to type any word\"\r\n                filterOption={(inputValue, option) =>\r\n                  option.value\r\n                    .toUpperCase()\r\n                    .indexOf(inputValue.toUpperCase()) !== -1\r\n                }\r\n                onChange={this.handleChangeAc}\r\n              />\r\n            </Col>\r\n            <Col span={12}>\r\n              <Input\r\n                name=\"ruWord\"\r\n                placeholder=\"Russian translation\"\r\n                style={{ width: FIELD_WIDTH }}\r\n                onChange={this.handleChange}\r\n                value={this.state.ruWord}\r\n              />\r\n            </Col>\r\n\r\n            <Col span={12}>\r\n              <Button\r\n                type=\"primary\"\r\n                style={{ display: \"inline-block\" }}\r\n                onClick={this.saveToVocabulary}\r\n              >\r\n                Add\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n          <br/>\r\n          <div style={{backgroundColor: \"whitesmoke\"}}>\r\n        <Table \r\n          {...this.state}\r\n          dataSource={this.state.sourceItems} columns={columns}\r\n          pagination={{ pageSize: 20 }} width={2.4*COLUMN_WIDTH}\r\n          bordered={true} />\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}